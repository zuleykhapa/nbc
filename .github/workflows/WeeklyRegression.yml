name: Weekly Regression
on:
  # schedule:
  #   - cron:  '0 1 * * MON' # runs at 2am CET MONDAY
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  gh_issue_repo: duckdblabs/duckdb-internal
  mounted_directory_name: mount-point

jobs:
  # check-nightly-builds:
  #   name: Check Nightly Build failures
  #   if: always()
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'

  #     - name: Install 
  #       shell: bash
  #       run: pip install duckdb pandas tabulate

  #     - name: Create run status report for nightly-builds on 'main'
  #       continue-on-error: true
  #       run: |
  #         # count consecutive failures and create a nightly_builds_status.md file
  #         python scripts/count_consecutive_failures.py

  #     - name: Upload nightly-build status
  #       uses: actions/upload-artifact@v4
  #       if: success()
  #       with:
  #         name: nightly_builds_status
  #         path: nightly_builds_status.md
  #         if-no-files-found: error

  start-runner:
    name: Start self-hosted ec2 runner
    runs-on: ubuntu-latest
    env:
      instance_id: i-0a6cd2153bfd28349

    steps:
      - name: Start EC2 runner
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_DEFAULT_REGION: us-east-1
        run: aws ec2 start-instances --instance-id ${{ env.instance_id }}

      - name: Create issue if failure
        shell: bash
        if: ${{ failure() && contains(github.ref_name, 'main') }}
        run: |
          gh issue create --repo ${{ env.gh_issue_repo }} --title "Weekly Regression Test Failure" --body "AWS box with instance-id ${{ env.instance_id }} could not be started"

  configure-mount-and-download-benchmark-data:
    name: Configure mount and download benchmark data
    needs: 
      - start-runner
    runs-on: self-hosted
    env:
      AWS_PROFILE: user1

    steps:
      - name: Install
        shell: bash
        run: sudo apt-get update -y -qq && sudo apt-get install -y -qq g++ ninja-build cmake make python-is-python3 libssl-dev pip gh jq python3-requests

      - name: umount mount-point (helps with debugging)
        shell: bash
        run: |
          if [ ! -d ${{ env.mounted_directory_name }} ] ; then 
            mkdir ${{ env.mounted_directory_name }}
            exit 0;
          fi 
          if mountpoint -q ${{ env.mounted_directory_name }} ; then
            # unmount mount-point. During debugging the mount can cause steps
            # to fail when copying duckdb-main to duckdb-old
            rm -rf ${{ env.mounted_directory_name }}/*
            sudo umount ${{ env.mounted_directory_name }}
          fi

      - name: Mount to instance storage
        shell: bash
        run: |
          # sometimes the mount point changes, by parsing the output of lsblk
          # we can always get the right mount point
          mount_name=$(sudo lsblk | awk 'NR > 1{
            size = $4;
            gsub(/MB/, "", size);
            gsub(/KB/, "", size);

            if (size ~ /M/) size /= 1024;       # Already in MB
            else if (size ~ /K/) size /= (1024*1024); # Convert KB to GB

            if (size > 800) print $1;
          }' | head -1)
          rm -rf ${{ env.mounted_directory_name }}
          sudo mkfs -t xfs -f /dev/$mount_name
          mkdir ${{ env.mounted_directory_name }}
          sudo mount /dev/$mount_name ${{ env.mounted_directory_name }}
          sudo chown -R ubuntu ${{ env.mounted_directory_name }}

      # - name: Load data for sf100 benchmarks.
      #   shell: bash
      #   working-directory: ${{ env.mounted_directory_name}}
      #   run: |
      #     wget https://duckdb-blobs.s3.us-east-1.amazonaws.com/data/tpch-sf100.db -O tpch_sf100.duckdb
      #     wget https://duckdb-blobs.s3.us-east-1.amazonaws.com/data/tpcds_sf100.db -O tpcds_sf100.duckdb 

  define-matrix:
    name: Define matrix of pairs
    needs: configure-mount-and-download-benchmark-data
    runs-on: self-hosted
    outputs:
      versions: ${{ steps.create-version-pairs.outputs.pairs }}

    steps:
      - name: Sparse-checkout repo with a script
        uses: actions/checkout@v4
        with:
          sparse-checkout: scripts/create_pairs_matrix.py
          path: ${{ env.mounted_directory_name }}
      
      - name: create pairs.json
        working-directory: ${{ env.mounted_directory_name }}
        run: |
          python scripts/create_pairs_matrix.py
      
      - name: Read JSON and create version pairs matrix
        working-directory: ${{ env.mounted_directory_name }}
        id: create-version-pairs
        run: |
          pairs=$(cat ../duckdb_previous_version_pairs.json | jq -c '.')
          echo "pairs=$pairs" >> $GITHUB_OUTPUT
      
  check-matrix:
    needs: 
      - define-matrix
      - configure-mount-and-download-benchmark-data
    if: ${{ needs.define-matrix.outputs.versions != '[]' }}
    strategy:
      matrix:
        versions: ${{ fromJSON(needs.define-matrix.outputs.versions) }}
      fail-fast: false
    runs-on: self-hosted
    steps:
      - run: |
          echo ${{ matrix.versions.new_name }}

  build-and-setup:
    name: Build DuckDB versions and link the benchmarks
    needs:
      - check-matrix 
      - define-matrix
      - configure-mount-and-download-benchmark-data
    if: ${{ needs.define-matrix.outputs.versions != '[]' }}
    strategy:
      matrix:
        versions: ${{ fromJSON(needs.define-matrix.outputs.versions) }}
      fail-fast: false
    runs-on: self-hosted
    env:
      GEN: ninja
      BUILD_BENCHMARK: 1
      BUILD_TPCH: 1
      BUILD_TPCDS: 1
      BUILD_JSON: 1
      BUILD_HTTPFS: 1
      BUILD_ICU: 1
      BUILD_JEMALLOC: 1
      CORE_EXTENSIONS: "inet"
      regression_output: regression_output.txt
    # outputs:
    #   failed_build: ${{ steps.failed-build.outputs.failed_build }}
    steps:
      - name: checkout duckdb-curr
        uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb'
          ref: ${{ matrix.versions.new_sha }}
          fetch-depth: 0
          path: ${{ env.mounted_directory_name}}/duckdb-curr-${{ matrix.versions.new_name }}

      - name: checkout duckdb-old
        uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb'
          ref: ${{ matrix.versions.old_sha }}
          fetch-depth: 0
          path: ${{ env.mounted_directory_name}}/duckdb-old-${{ matrix.versions.old_name }}

      # - name: Checkout duckdb-old to week ago version
      #   shell: bash
      #   working-directory: ${{ env.mounted_directory_name }}/duckdb-old-main
      #   run: |
      #     git checkout ${{ matrix.versions.old_sha }}

      # - name: Store current git hash of duckdb-curr
      #   shell: bash
      #   working-directory: ${{ env.mounted_directory_name }}/duckdb-curr-main
      #   run: |
      #     # update duckdb_curr_version_main.txt
      #     git rev-parse --verify HEAD > ../../duckdb_curr_version_main.txt

      - name: Build old and current
        shell: bash
        working-directory: ${{ env.mounted_directory_name }}
        run: |
          cd duckdb-curr-${{ matrix.versions.new_name }} && make clean && make
          cd ..
          cd duckdb-old-${{ matrix.versions.old_name }} && make clean && make

      - name: Set up benchmarks 
        shell: bash
        working-directory: ${{ env.mounted_directory_name }}/duckdb-old-${{ matrix.versions.old_name }}
        run: |
          # we do this so new added benchmarks that break duckdb old
          # do not cause failures.
          rm -rf ../duckdb-curr-${{ matrix.versions.new_name }}/benchmark
          mkdir ../duckdb-curr-${{ matrix.versions.new_name }}/benchmark
          cp -r benchmark ../duckdb-curr-${{ matrix.versions.new_name }}

      # - name: Link duckdb-curr/duckdb_benchmark_data to tpch_sf100.duckdb and tpcds_sf100.duckdb
      #   shell: bash 
      #   working-directory: ${{ env.mounted_directory_name }}/duckdb-curr-${{ matrix.versions.new_name }}
      #   run: |
      #     mkdir duckdb_benchmark_data
      #     cd duckdb_benchmark_data
      #     ln -s ${{ github.workspace }}/${{ env.mounted_directory_name }}/tpch_sf100.duckdb .
      #     ln -s ${{ github.workspace }}/${{ env.mounted_directory_name }}/tpcds_sf100.duckdb .
    
      # - name: Link duckdb-old/duckdb_benchmark_data to tpch_sf100.duckdb and tpcds_sf100.duckdb
      #   shell: bash 
      #   working-directory: ${{ env.mounted_directory_name }}/duckdb-old-${{ matrix.versions.old_name }}
      #   run: |
      #     mkdir duckdb_benchmark_data
      #     cd duckdb_benchmark_data
      #     ln -s ${{ github.workspace }}/${{ env.mounted_directory_name }}/tpch_sf100.duckdb .
      #     ln -s ${{ github.workspace }}/${{ env.mounted_directory_name }}/tpcds_sf100.duckdb .
      
      - name: Generate micro_extended.csv and copy to duckdb-curr-main
        shell: bash
        working-directory: ${{ env.mounted_directory_name }}/duckdb-old-${{ matrix.versions.old_name }}
        run: |
          # find benchmark/micro | grep ".*.benchmark" | sort > .github/regression/micro_extended.csv
          echo benchmark/micro/index/insert/insert_pk_fk.benchmark >> .github/regression/micro_extended.csv
          echo benchmark/micro/pushdown/window_partition_pushdown.benchmark >> .github/regression/micro_extended.csv
          sed -i 's/\(COPY lineitem to .* (.*\))\;/\1, OVERWRITE TRUE)\;/g' benchmark/micro/pushdown/window_partition_pushdown.benchmark
          cat benchmark/micro/pushdown/window_partition_pushdown.benchmark
          cp .github/regression/micro_extended.csv ../duckdb-curr-${{ matrix.versions.new_name }}/.github/regression/micro_extended.csv

      # - id: failed-build
      #   shell: bash
      #   if: failure()
      #   run: |
      #     echo "failed_build=${{ matrix.versions.new_name }}" >> $GITHUB_OUTPUT
    
  run-regression-tests:
    name: Run Regression Tests
    if: success()
    # if: always()
    needs: 
      - define-matrix
      - configure-mount-and-download-benchmark-data
      - build-and-setup
      # - check-nightly-builds
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        versions: ${{ fromJSON(needs.define-matrix.outputs.versions) }}
        test: ['micro_extended.csv']
        # test: ['large/tpch.csv', 'large/ingestion.csv', 'micro_extended.csv', 'large/tpcds.csv']
        # exclude: 
        #   - versions: ${{ needs.build-and-setup.outputs.failed_build }}
    outputs:
      file_name: ${{ steps.create.outputs.file_name }}
        
    steps:
      - name: Create a File Name 
        if: always()
        id: create
        shell: bash
        working-directory: ${{ env.mounted_directory_name }}
        run: |
          test=$(echo "${{ matrix.test }}" | sed -e 's/\//_/g' -e 's/\.csv//')
          new_name=${{ matrix.versions.new_name }}
          old_name=${{ matrix.versions.old_name }}
          file_name=regression_output_${test}_${new_name}_${old_name}.txt
          
          echo $file_name
          echo "file_name=$file_name">> $GITHUB_OUTPUT
          
      - name: Run Regression Test
        if: contains(${{ steps.create.outputs.file_name }}, 'regression')
        continue-on-error: true
        shell: bash
        working-directory: ${{ env.mounted_directory_name }}
        run: |
          export disable_timeout=""
          if [[ ${{ matrix.test }} == large/tpcds.csv ]]; then
            disable_timeout="--disable-timeout"
          fi
          python duckdb-curr-${{ matrix.versions.new_name }}/scripts/regression/test_runner.py \
            --old=duckdb-old-${{ matrix.versions.old_name }}/build/release/benchmark/benchmark_runner \
            --new=duckdb-curr-${{ matrix.versions.new_name }}/build/release/benchmark/benchmark_runner \
            --benchmarks=duckdb-curr-${{ matrix.versions.new_name }}/.github/regression/${{ matrix.test }} $disable_timeout \
            --verbose > ${{ steps.create.outputs.file_name }}
                  
      - name: Upload results
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ steps.create.outputs.file_name }}
          path: ${{ env.mounted_directory_name }}/${{ steps.create.outputs.file_name }}
          if-no-files-found: error
  
  collect-issues:
    name: Collect issues
    needs: 
      - start-runner
      - define-matrix
      - configure-mount-and-download-benchmark-data
      - build-and-setup
      # - check-nightly-builds
      - run-regression-tests
    if: always()
    runs-on: self-hosted
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.mounted_directory_name }}
    strategy:
      matrix: 
        versions: ${{ fromJSON(needs.define-matrix.outputs.versions) }}
        # exclude: 
        #   - versions: ${{ needs.build-and-setup.outputs.failed_build }}

    steps:
      - name: Collect issues on Benchmarks
        if: contains(github.ref_name, 'main')
        run: |
          issue_body_file="issue_body_${{ matrix.versions.new_name }}_${{ matrix.versions.old_name }}.txt"
          
          # collect issues on benchmarks runs
          for output in regression_*_${{ matrix.versions.new_name }}_${{ matrix.versions.old_name }}.txt; do
            if ! grep -q "NO REGRESSIONS DETECTED" "$output"; then
              printf "### Regression detected between \`${{ matrix.versions.new_name }}\` and \`${{ matrix.versions.old_name }}\`\n
              Hash info:\n
              |  | Branch | SHA |
              |:-|:-------|:----|
              | **NEW** | ${{ matrix.versions.new_name }} | ${{ matrix.versions.new_sha }} |
              | **OLD** | ${{ matrix.versions.old_name }} | ${{ matrix.versions.old_sha }} |
              #### List of regressing tests\n" >> "$issue_body_file"
              test_name=$(echo "$output" | awk -F'_' '{print $3,$4}')
              printf -- "- **%s**\n" "$test_name" >> "$issue_body_file"
              printf -- "\`\`\`\n%s\n\`\`\`\n" "$(awk '/REGRESSIONS DETECTED/,/OTHER TIMINGS/' $output)"  >> "$issue_body_file"
            fi
          done

  file-issue:
    name: File Issue
    needs: 
      - start-runner
      - define-matrix
      - configure-mount-and-download-benchmark-data
      - build-and-setup
      # - check-nightly-builds
      - run-regression-tests
      - collect-issues
    if: always()
    runs-on: self-hosted
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.mounted_directory_name }}
    steps:
      # - name: Download nightly build status
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: nightly_builds_status 
      #     path: ${{ env.mounted_directory_name }}
          
      - name: File issue on preparation steps
        if: |
            contains(github.ref_name, 'main') && 
            (needs.configure-mount-and-download-benchmark-data.result != 'success' ||
            needs.build-and-setup.result != 'success')
        run: |
          echo -e "Benchmark preparation steps have failed, please check the \
            [workflow run](https://github.com/duckdblabs/duckdb-internal/actions/runs/${{ github.run_id }}) for details.\n\n" > report.txt

      - name: Create Regressions Report
        run: |
          if grep -q "REGRESSIONS DETECTED" issue_body*.txt; then
            echo "Regressions detected, GitHub issue will be filed."
            echo "# Regression tests" >> report.txt
            cat issue_body*.txt >> report.txt
            echo "Latest WeeklyRegression run: [Run Link](https://github.com/duckdblabs/duckdb-internal/actions/runs/${{ github.run_id }})" >> report.txt
          fi

      - name: Add Nightly-Build Failures to Report
        run: |
          if grep -q "nightly-build" nightly_build*.md; then
            echo "Adding nightly-build report to GitHub issue."
            echo "# Nighly-Builds status on main" >> report.txt
            cat nightly_build*.md >> report.txt
          fi

      # - name: Create Issue
      #   if: success()
      #   run: |
      #     if [ -f report.txt ]; then
      #       # create issue
      #       gh issue create --repo ${{ env.gh_issue_repo }} --title "Weekly Regression Test Failure" --body-file report.txt
      #     fi
      - name: Upload nightly-build status
        uses: actions/upload-artifact@v4
        with:
          name: REPORT
          path: ${{ env.mounted_directory_name }}/report.txt
          if-no-files-found: error

  shutdown:
    name: shut down
    if: always()
    runs-on: self-hosted
    needs:
      - start-runner
      # -   check-nightly-builds
      - file-issue
    steps:
      - name: shutdown
        shell: bash
        run: sudo shutdown
