name: Regression
on:
  workflow_call:
    inputs:
      base_hash:
        type: string
  workflow_dispatch:
    inputs:
      base_hash:
        type: string
        default: 120567b3d5
  repository_dispatch:
  push:
    branches-ignore:
      - 'main'
      - 'feature'
      - 'v*.*-*'
    paths-ignore:
      - '**.md'
      - 'tools/**'
      - '!tools/pythonpkg/**'
      - '.github/patches/duckdb-wasm/**'
      - '.github/workflows/**'
      - '!.github/workflows/Regression.yml'
  merge_group:
  pull_request:
    types: [opened, reopened, ready_for_review]
    paths-ignore:
      - '**.md'
      - 'tools/**'
      - '!tools/pythonpkg/**'
      - '.github/patches/duckdb-wasm/**'
      - '.github/workflows/**'
      - '!.github/workflows/Regression.yml'


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  BASE_BRANCH: ${{ github.base_ref || (endsWith(github.ref, '_feature') && 'feature' || 'main') }}
  BASE_HASH: ${{ inputs.base_hash }}

jobs:
  build-and-setup:
    name: BUILD
    runs-on: ubuntu-latest
    env:
      GEN: ninja
      BUILD_BENCHMARK: 1
      BUILD_TPCH: 1
      BUILD_TPCDS: 1
      BUILD_JSON: 1
      BUILD_HTTPFS: 1
      BUILD_ICU: 1
      BUILD_JEMALLOC: 1
      CORE_EXTENSIONS: "inet"
      regression_output: regression_output.txt
    strategy:
      matrix:
        versions: [ { old: 'v1.2-histrionicus', new: 'v1.3-ossivalis' }, { old: 'v1.2.2', new: 'v1.3.1' } ]
      fail-fast: false
    steps:
      - name: Sparse-checkout new micro.csv
        uses: actions/checkout@v4
        with:
          sparse-checkout: micro.csv
          path: micro

      - name: checkout duckdb-curr-${{matrix.versions.new}}
        uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb'
          ref: ${{matrix.versions.new}}
          fetch-depth: 0
          path: duckdb-curr-${{matrix.versions.new}}

      - name: checkout duckdb-old-${{matrix.versions.old}}
        uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb'
          ref: ${{matrix.versions.old}}
          fetch-depth: 0
          path: duckdb-old-${{matrix.versions.old}}

      - name: Setup Ccache
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature' }}
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}
          save: ${{ github.ref == 'refs/heads/main' || github.repository != 'duckdb/duckdb' }}

      - name: Build new and old
        shell: bash
        run: |
          ls -lah
          ls micro
          cd duckdb-curr-${{matrix.versions.new}} && make clean && make
          cd ..
          cd duckdb-old-${{matrix.versions.old}} && make clean && make

      - name: Set up benchmarks 
        shell: bash
        working-directory: duckdb-curr-${{matrix.versions.new}}
        run: |
          # couldn't find some benchmarks so copying from curr
          rm -rf ../duckdb-old-${{matrix.versions.old}}/benchmark
          mkdir ../duckdb-old-${{matrix.versions.old}}/benchmark
          cp -r benchmark ../duckdb-old-${{matrix.versions.old}}

      - name: Regression Test Micro
        if: always()
        shell: bash
        run: |
          python duckdb-curr-${{matrix.versions.new}}/scripts/regression/test_runner.py \
              --old=duckdb-old-${{matrix.versions.old}}/build/release/benchmark/benchmark_runner \
              --new=duckdb-curr-${{matrix.versions.new}}/build/release/benchmark/benchmark_runner \
              --benchmarks=micro/micro.csv \
              --verbose
          
      # - name: Upload results
      #   uses: actions/upload-artifact@v4
      #   if: success()
      #   with:
      #     name: REPORT_${{matrix.versions.new}}_${{matrix.versions.old}}
      #     path: REPORT_${{matrix.versions.new}}_${{matrix.versions.old}}
      #     if-no-files-found: error


  # regression-test-benchmark-runner:
  #   name: Regression Tests
  #   needs: build-and-setup
  #   runs-on: ubuntu-22.04
  #   env:
  #     CC: gcc-10
  #     CXX: g++-10
  #     GEN: ninja
  #     BUILD_BENCHMARK: 1
  #     BUILD_JEMALLOC: 1
  #     CORE_EXTENSIONS: "json;tpch;tpcds;httpfs;inet;icu"

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         repository: duckdb/duckdb
  #         fetch-depth: 0

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.12'

  #     - name: Install
  #       shell: bash
  #       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build && pip install requests

  #     - name: Build Current and Base Branch
  #       shell: bash
  #       run: |
  #         make
  #         git clone --branch ${{ env.BASE_BRANCH }} https://github.com/duckdb/duckdb.git --depth=1
  #         cd duckdb
  #         make
  #         cd ..

  #     - name: Set up benchmarks
  #       shell: bash
  #       run: |
  #         cp -r benchmark duckdb/

  #     - name: Clean up space
  #       shell: bash
  #       run: |
  #         sudo apt-get clean
  #         sudo rm -rf /usr/local/lib/android
  #         sudo rm -rf /usr/share/dotnet
  #         sudo rm -rf /usr/share/dotnet
  #         sudo rm -rf /opt/ghc
  #         sudo rm -rf "/usr/local/share/boost"
  #         sudo rm -rf "$AGENT_TOOLSDIRECTORY"
  #         sudo rm -rf /opt/pipx
  #         sudo rm -rf /opt/microsoft
  #         sudo rm -rf /opt/google
  #         docker system prune -af

  #     - name: Regression Test Micro
  #       if: always()
  #       shell: bash
  #       run: |
  #         # python scripts/regression/test_runner.py --old duckdb/build/release/benchmark/benchmark_runner --new build/release/benchmark/benchmark_runner --benchmarks .github/regression/micro.csv --verbose --threads 2
  #         python duckdb-curr/scripts/regression/test_runner.py \
  #             --old=duckdb-old-${{matrix.versions.old}}-${{ matrix.versions.old_name }}/build/release/benchmark/benchmark_runner \
  #             --new=duckdb-curr/build/release/benchmark/benchmark_runner \
  #             --benchmarks=duckdb-curr/.github/regression/micro.csv \
  #             --verbose > REPORT
          
  #     - name: Upload results
  #       uses: actions/upload-artifact@v4
  #       if: success()
  #       with:
  #         name: REPORT
  #         path: REPORT
  #         if-no-files-found: error

  #     - name: Setup upterm session
  #       uses: lhotari/action-upterm@v1
